//----------------------
// <auto-generated>
//     Generated by node_generator.py
//     source: langs-native/tree-sitter-scss/src/node-types.json
// </auto-generated>
//----------------------

#nullable enable

using System.Linq;

namespace TreeSitter.SCSS.Nodes {

    public abstract class SCSSLanguageNode
    {
        public static SCSSLanguageNode FromNode(TreeSitter.Node node) {
            if (node is null) throw new System.ArgumentNullException(nameof(node));
            if (!node.IsNamed) return new SCSSLanguageNodeTerminalNode(node);
            switch (node.Kind) {
                case "extend_statement": return new ExtendStatement(node);
                case "single_line_comment": return new SingleLineComment(node);
                case "parameter": return new Parameter(node);
                case "from": return new From(node);
                case "through": return new Through(node);
                case "name": return new Name(node);
                case "binary_query": return new BinaryQuery(node);
                case "function_statement": return new FunctionStatement(node);
                case "apply_statement": return new ApplyStatement(node);
                case "supports_statement": return new SupportsStatement(node);
                case "feature_name": return new FeatureName(node);
                case "attribute_selector": return new AttributeSelector(node);
                case "important": return new Important(node);
                case "use_statement": return new UseStatement(node);
                case "error_statement": return new ErrorStatement(node);
                case "color_value": return new ColorValue(node);
                case "integer_value": return new IntegerValue(node);
                case "unary_query": return new UnaryQuery(node);
                case "each_statement": return new EachStatement(node);
                case "keyframe_block_list": return new KeyframeBlockList(node);
                case "rule_set": return new RuleSet(node);
                case "keyframes_name": return new KeyframesName(node);
                case "value": return new Value(node);
                case "else_if_clause": return new ElseIfClause(node);
                case "keyword_query": return new KeywordQuery(node);
                case "variable_value": return new VariableValue(node);
                case "include_statement": return new IncludeStatement(node);
                case "default_value": return new DefaultValue(node);
                case "sibling_selector": return new SiblingSelector(node);
                case "while_statement": return new WhileStatement(node);
                case "to": return new To(node);
                case "unit": return new Unit(node);
                case "variable_name": return new VariableName(node);
                case "namespace_statement": return new NamespaceStatement(node);
                case "descendant_selector": return new DescendantSelector(node);
                case "child_selector": return new ChildSelector(node);
                case "class_selector": return new ClassSelector(node);
                case "binary_expression": return new BinaryExpression(node);
                case "mixin_statement": return new MixinStatement(node);
                case "parenthesized_value": return new ParenthesizedValue(node);
                case "at_keyword": return new AtKeyword(node);
                case "stylesheet": return new Stylesheet(node);
                case "else_clause": return new ElseClause(node);
                case "forward_statement": return new ForwardStatement(node);
                case "condition": return new Condition(node);
                case "class_name": return new ClassName(node);
                case "feature_query": return new FeatureQuery(node);
                case "parenthesized_query": return new ParenthesizedQuery(node);
                case "argument": return new Argument(node);
                case "nesting_selector": return new NestingSelector(node);
                case "argument_name": return new ArgumentName(node);
                case "string_value": return new StringValue(node);
                case "function_name": return new FunctionName(node);
                case "if_statement": return new IfStatement(node);
                case "import_statement": return new ImportStatement(node);
                case "declaration": return new Declaration(node);
                case "for_statement": return new ForStatement(node);
                case "pseudo_class_selector": return new PseudoClassSelector(node);
                case "universal_selector": return new UniversalSelector(node);
                case "return_statement": return new ReturnStatement(node);
                case "pseudo_element_selector": return new PseudoElementSelector(node);
                case "at_root_statement": return new AtRootStatement(node);
                case "warn_statement": return new WarnStatement(node);
                case "adjacent_sibling_selector": return new AdjacentSiblingSelector(node);
                case "selectors": return new Selectors(node);
                case "namespace_name": return new NamespaceName(node);
                case "plain_value": return new PlainValue(node);
                case "media_statement": return new MediaStatement(node);
                case "arguments": return new Arguments(node);
                case "float_value": return new FloatValue(node);
                case "id_selector": return new IdSelector(node);
                case "keyframe_block": return new KeyframeBlock(node);
                case "call_expression": return new CallExpression(node);
                case "comment": return new Comment(node);
                case "parameters": return new Parameters(node);
                case "keyframes_statement": return new KeyframesStatement(node);
                case "at_rule": return new AtRule(node);
                case "charset_statement": return new CharsetStatement(node);
                case "debug_statement": return new DebugStatement(node);
                case "key": return new Key(node);
                case "block": return new Block(node);
                case "placeholder": return new Placeholder(node);
                case "attribute_name": return new AttributeName(node);
                case "argument_value": return new ArgumentValue(node);
                case "tag_name": return new TagName(node);
                case "identifier": return new Identifier(node);
                case "selector_query": return new SelectorQuery(node);
                case "property_name": return new PropertyName(node);
                case "variable": return new Variable(node);
                case "id_name": return new IdName(node);
                case "if_clause": return new IfClause(node);
                case "ERROR": return new ErrorNode(node);
                default: throw new System.ArgumentException("unknown node type: " + node.Kind, nameof(node));
            }
        }

    
        public string Kind { get; set; }

        protected SCSSLanguageNode(TreeSitter.Node node)
        {
            Kind = node.Kind;
        }
    }
    
    public class SCSSLanguageNodeTerminalNode : SCSSLanguageNode
    {
        public SCSSLanguageNodeTerminalNode(TreeSitter.Node node) : base(node)
        {
        }
    }
    
    public class ErrorNode : SCSSLanguageNode
    {
        public ErrorNode(TreeSitter.Node node) : base(node)
        {
        }
    }

    public class AdjacentSiblingSelector : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public AdjacentSiblingSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "adjacent_sibling_selector");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ApplyStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public ApplyStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "apply_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Argument : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public Argument(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "argument");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ArgumentValue : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public ArgumentValue(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "argument_value");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Arguments : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public Arguments(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "arguments");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class AtRootStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public AtRootStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "at_root_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class AtRule : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public AtRule(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "at_rule");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class AttributeSelector : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public AttributeSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "attribute_selector");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class BinaryExpression : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public BinaryExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "binary_expression");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class BinaryQuery : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public BinaryQuery(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "binary_query");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Block : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public Block(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "block");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class CallExpression : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public CallExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "call_expression");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class CharsetStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public CharsetStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "charset_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ChildSelector : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public ChildSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "child_selector");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ClassSelector : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public ClassSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "class_selector");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ColorValue : SCSSLanguageNode
    {
        public ColorValue(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "color_value");
            
        }
    }

    public class Condition : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public Condition(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "condition");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class DebugStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public DebugStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "debug_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Declaration : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public Declaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "declaration");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class DefaultValue : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public DefaultValue(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "default_value");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class DescendantSelector : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public DescendantSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "descendant_selector");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class EachStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public EachStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "each_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ElseClause : SCSSLanguageNode
    {
        public System.Collections.Generic.List<Block> Children { get; set; }
        public ElseClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "else_clause");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Block(x)).ToList();
        }
    }

    public class ElseIfClause : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public ElseIfClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "else_if_clause");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ErrorStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public ErrorStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "error_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ExtendStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public ExtendStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "extend_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class FeatureQuery : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public FeatureQuery(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "feature_query");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class FloatValue : SCSSLanguageNode
    {
        public System.Collections.Generic.List<Unit> Children { get; set; }
        public FloatValue(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "float_value");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Unit(x)).ToList();
        }
    }

    public class ForStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public ForStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "for_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ForwardStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public ForwardStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "forward_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class From : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public From(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "from");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class FunctionStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public FunctionStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "function_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class IdSelector : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public IdSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "id_selector");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class IfClause : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public IfClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "if_clause");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class IfStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public IfStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "if_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ImportStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public ImportStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "import_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class IncludeStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public IncludeStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "include_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class IntegerValue : SCSSLanguageNode
    {
        public System.Collections.Generic.List<Unit> Children { get; set; }
        public IntegerValue(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "integer_value");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Unit(x)).ToList();
        }
    }

    public class KeyframeBlock : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public KeyframeBlock(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "keyframe_block");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class KeyframeBlockList : SCSSLanguageNode
    {
        public System.Collections.Generic.List<KeyframeBlock> Children { get; set; }
        public KeyframeBlockList(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "keyframe_block_list");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new KeyframeBlock(x)).ToList();
        }
    }

    public class KeyframesStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public KeyframesStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "keyframes_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class MediaStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public MediaStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "media_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class MixinStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public MixinStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "mixin_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class NamespaceStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public NamespaceStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "namespace_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Parameter : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public Parameter(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "parameter");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Parameters : SCSSLanguageNode
    {
        public System.Collections.Generic.List<Parameter> Children { get; set; }
        public Parameters(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "parameters");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Parameter(x)).ToList();
        }
    }

    public class ParenthesizedQuery : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public ParenthesizedQuery(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "parenthesized_query");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ParenthesizedValue : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public ParenthesizedValue(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "parenthesized_value");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Placeholder : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public Placeholder(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "placeholder");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class PseudoClassSelector : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public PseudoClassSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "pseudo_class_selector");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class PseudoElementSelector : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public PseudoElementSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "pseudo_element_selector");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ReturnStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public ReturnStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "return_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class RuleSet : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public RuleSet(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "rule_set");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SelectorQuery : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public SelectorQuery(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "selector_query");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Selectors : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public Selectors(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "selectors");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SiblingSelector : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public SiblingSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "sibling_selector");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Stylesheet : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public Stylesheet(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "stylesheet");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SupportsStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public SupportsStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "supports_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Through : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public Through(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "through");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class UnaryQuery : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public UnaryQuery(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "unary_query");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class UniversalSelector : SCSSLanguageNode
    {
        public UniversalSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "universal_selector");
            
        }
    }

    public class UseStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public UseStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "use_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class WarnStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public WarnStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "warn_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class WhileStatement : SCSSLanguageNode
    {
        public System.Collections.Generic.List<SCSSLanguageNode> Children { get; set; }
        public WhileStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "while_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (SCSSLanguageNode) SCSSLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ArgumentName : SCSSLanguageNode
    {
        public ArgumentName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "argument_name");
            
        }
    }

    public class AtKeyword : SCSSLanguageNode
    {
        public AtKeyword(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "at_keyword");
            
        }
    }

    public class AttributeName : SCSSLanguageNode
    {
        public AttributeName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "attribute_name");
            
        }
    }

    public class ClassName : SCSSLanguageNode
    {
        public ClassName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "class_name");
            
        }
    }

    public class Comment : SCSSLanguageNode
    {
        public Comment(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "comment");
            
        }
    }

    public class FeatureName : SCSSLanguageNode
    {
        public FeatureName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "feature_name");
            
        }
    }

    public class FunctionName : SCSSLanguageNode
    {
        public FunctionName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "function_name");
            
        }
    }

    public class IdName : SCSSLanguageNode
    {
        public IdName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "id_name");
            
        }
    }

    public class Identifier : SCSSLanguageNode
    {
        public Identifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "identifier");
            
        }
    }

    public class Important : SCSSLanguageNode
    {
        public Important(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "important");
            
        }
    }

    public class Key : SCSSLanguageNode
    {
        public Key(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "key");
            
        }
    }

    public class KeyframesName : SCSSLanguageNode
    {
        public KeyframesName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "keyframes_name");
            
        }
    }

    public class KeywordQuery : SCSSLanguageNode
    {
        public KeywordQuery(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "keyword_query");
            
        }
    }

    public class Name : SCSSLanguageNode
    {
        public Name(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "name");
            
        }
    }

    public class NamespaceName : SCSSLanguageNode
    {
        public NamespaceName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "namespace_name");
            
        }
    }

    public class NestingSelector : SCSSLanguageNode
    {
        public NestingSelector(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "nesting_selector");
            
        }
    }

    public class PlainValue : SCSSLanguageNode
    {
        public PlainValue(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "plain_value");
            
        }
    }

    public class PropertyName : SCSSLanguageNode
    {
        public PropertyName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "property_name");
            
        }
    }

    public class SingleLineComment : SCSSLanguageNode
    {
        public SingleLineComment(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "single_line_comment");
            
        }
    }

    public class StringValue : SCSSLanguageNode
    {
        public StringValue(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "string_value");
            
        }
    }

    public class TagName : SCSSLanguageNode
    {
        public TagName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "tag_name");
            
        }
    }

    public class To : SCSSLanguageNode
    {
        public To(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "to");
            
        }
    }

    public class Unit : SCSSLanguageNode
    {
        public Unit(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "unit");
            
        }
    }

    public class Value : SCSSLanguageNode
    {
        public Value(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "value");
            
        }
    }

    public class Variable : SCSSLanguageNode
    {
        public Variable(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "variable");
            
        }
    }

    public class VariableName : SCSSLanguageNode
    {
        public VariableName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "variable_name");
            
        }
    }

    public class VariableValue : SCSSLanguageNode
    {
        public VariableValue(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "variable_value");
            
        }
    }
}