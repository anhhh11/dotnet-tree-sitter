//----------------------
// <auto-generated>
//     Generated by node_generator.py
//     source: langs-native/tree-sitter-html/src/node-types.json
// </auto-generated>
//----------------------

#nullable enable

using System.Linq;

namespace TreeSitter.HTML.Nodes {

    public abstract class HTMLLanguageNode
    {
        public static HTMLLanguageNode FromNode(TreeSitter.Node node) {
            if (node is null) throw new System.ArgumentNullException(nameof(node));
            if (!node.IsNamed) return new HTMLLanguageNodeTerminalNode(node);
            switch (node.Kind) {
                case "attribute_name": return new AttributeName(node);
                case "end_tag": return new EndTag(node);
                case "fragment": return new Fragment(node);
                case "raw_text": return new RawText(node);
                case "text": return new Text(node);
                case "attribute": return new Attribute(node);
                case "tag_name": return new TagName(node);
                case "erroneous_end_tag": return new ErroneousEndTag(node);
                case "start_tag": return new StartTag(node);
                case "attribute_value": return new AttributeValue(node);
                case "style_element": return new StyleElement(node);
                case "comment": return new Comment(node);
                case "erroneous_end_tag_name": return new ErroneousEndTagName(node);
                case "self_closing_tag": return new SelfClosingTag(node);
                case "doctype": return new Doctype(node);
                case "element": return new Element(node);
                case "script_element": return new ScriptElement(node);
                case "quoted_attribute_value": return new QuotedAttributeValue(node);
                case "ERROR": return new ErrorNode(node);
                default: throw new System.ArgumentException("unknown node type: " + node.Kind, nameof(node));
            }
        }

    
        public string Kind { get; set; }

        protected HTMLLanguageNode(TreeSitter.Node node)
        {
            Kind = node.Kind;
        }
    }
    
    public class HTMLLanguageNodeTerminalNode : HTMLLanguageNode
    {
        public HTMLLanguageNodeTerminalNode(TreeSitter.Node node) : base(node)
        {
        }
    }
    
    public class ErrorNode : HTMLLanguageNode
    {
        public ErrorNode(TreeSitter.Node node) : base(node)
        {
        }
    }

    public class Attribute : HTMLLanguageNode
    {
        public System.Collections.Generic.IEnumerable<HTMLLanguageNode> Children { get; set; }
        public Attribute(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "attribute");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (HTMLLanguageNode) HTMLLanguageNode.FromNode(x)!);
        }
    }

    public class Doctype : HTMLLanguageNode
    {
        public Doctype(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "doctype");
            
        }
    }

    public class Element : HTMLLanguageNode
    {
        public System.Collections.Generic.IEnumerable<HTMLLanguageNode> Children { get; set; }
        public Element(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "element");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (HTMLLanguageNode) HTMLLanguageNode.FromNode(x)!);
        }
    }

    public class EndTag : HTMLLanguageNode
    {
        public System.Collections.Generic.IEnumerable<TagName> Children { get; set; }
        public EndTag(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "end_tag");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new TagName(x));
        }
    }

    public class ErroneousEndTag : HTMLLanguageNode
    {
        public System.Collections.Generic.IEnumerable<ErroneousEndTagName> Children { get; set; }
        public ErroneousEndTag(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "erroneous_end_tag");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new ErroneousEndTagName(x));
        }
    }

    public class Fragment : HTMLLanguageNode
    {
        public System.Collections.Generic.IEnumerable<HTMLLanguageNode> Children { get; set; }
        public Fragment(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "fragment");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (HTMLLanguageNode) HTMLLanguageNode.FromNode(x)!);
        }
    }

    public class QuotedAttributeValue : HTMLLanguageNode
    {
        public System.Collections.Generic.IEnumerable<AttributeValue> Children { get; set; }
        public QuotedAttributeValue(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "quoted_attribute_value");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new AttributeValue(x));
        }
    }

    public class ScriptElement : HTMLLanguageNode
    {
        public System.Collections.Generic.IEnumerable<HTMLLanguageNode> Children { get; set; }
        public ScriptElement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "script_element");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (HTMLLanguageNode) HTMLLanguageNode.FromNode(x)!);
        }
    }

    public class SelfClosingTag : HTMLLanguageNode
    {
        public System.Collections.Generic.IEnumerable<HTMLLanguageNode> Children { get; set; }
        public SelfClosingTag(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "self_closing_tag");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (HTMLLanguageNode) HTMLLanguageNode.FromNode(x)!);
        }
    }

    public class StartTag : HTMLLanguageNode
    {
        public System.Collections.Generic.IEnumerable<HTMLLanguageNode> Children { get; set; }
        public StartTag(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "start_tag");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (HTMLLanguageNode) HTMLLanguageNode.FromNode(x)!);
        }
    }

    public class StyleElement : HTMLLanguageNode
    {
        public System.Collections.Generic.IEnumerable<HTMLLanguageNode> Children { get; set; }
        public StyleElement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "style_element");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (HTMLLanguageNode) HTMLLanguageNode.FromNode(x)!);
        }
    }

    public class AttributeName : HTMLLanguageNode
    {
        public AttributeName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "attribute_name");
            
        }
    }

    public class AttributeValue : HTMLLanguageNode
    {
        public AttributeValue(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "attribute_value");
            
        }
    }

    public class Comment : HTMLLanguageNode
    {
        public Comment(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "comment");
            
        }
    }

    public class ErroneousEndTagName : HTMLLanguageNode
    {
        public ErroneousEndTagName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "erroneous_end_tag_name");
            
        }
    }

    public class RawText : HTMLLanguageNode
    {
        public RawText(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "raw_text");
            
        }
    }

    public class TagName : HTMLLanguageNode
    {
        public TagName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "tag_name");
            
        }
    }

    public class Text : HTMLLanguageNode
    {
        public Text(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "text");
            
        }
    }
}